version: "3.7"

x-datanode_base: &datanode_base
  image: hadoop-datanode
  networks:
    - bridge
  restart: on-failure:3

services:
  namenode01:
    image: hadoop-namenode
    container_name: namenode01
    hostname: namenode01
    command: ["/start.sh", "active"]
    ports:
      - "9200:9870" # namenode web UI
    depends_on:
      journal01:
        condition: service_healthy
      journal02:
        condition: service_healthy
      journal03:
        condition: service_healthy
      zookeeper01:
        condition: service_healthy
      zookeeper02:
        condition: service_healthy
      zookeeper03:
        condition: service_healthy
    networks:
      - bridge
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9870/"]
      interval: 30s
      timeout: 20s
      retries: 7
      start_period: 30s
    
  namenode02:
    image: hadoop-namenode
    container_name: namenode02
    hostname: namenode02
    command: ["/start.sh", "standby"]
    ports:
      - "9201:9870" # namenode web UI
    depends_on:
      journal01:
        condition: service_healthy
      journal02:
        condition: service_healthy
      journal03:
        condition: service_healthy
      zookeeper01:
        condition: service_healthy
      zookeeper02:
        condition: service_healthy
      zookeeper03:
        condition: service_healthy
      namenode01:
        condition: service_healthy
    networks:
      - bridge
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9870/"]
      interval: 30s
      timeout: 20s
      retries: 7
      start_period: 30s

  spark-master:
    image: hadoop-spark-base
    container_name: spark-master01
    hostname: spark-master01
    ports:
      - "9050:8080"
      - "7077:7077"
    
    environment:
      - SPARK_LOCAL_IP=spark-master
      - SPARK_WORKLOAD=master

  spark-worker-1:
    image: hadoop-spark-base
    container_name: spark-worker01
    hostname: spark-worker01
    ports:
      - "9051:8080"
      - "7000:7077"
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
      - SPARK_DRIVER_MEMORY=1G
      - SPARK_EXECUTOR_MEMORY=1G
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker-1

  spark-worker-2:
    image: hadoop-spark-base
    container_name: spark-worker02
    hostname: spark-worker02
    ports:
      - "9052:8080"
      - "7001:7077"
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
      - SPARK_DRIVER_MEMORY=1G
      - SPARK_EXECUTOR_MEMORY=1G
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker-2


  journal01:
    image: hadoop-journalnode
    container_name: journal01
    hostname: journal01
    ports:
      - "9300:8480"
    networks:
      - bridge
    restart: on-failure:3

  journal02:
    image: hadoop-journalnode
    container_name: journal02
    hostname: journal02
    ports:
      - "9301:8480"
    networks:
      - bridge
    restart: on-failure:3

  journal03:
    image: hadoop-journalnode
    container_name: journal03
    hostname: journal03
    ports:
      - "9302:8480"
    networks:
      - bridge
    restart: on-failure:3

  datanode01:
    <<: *datanode_base
    container_name: datanode01
    hostname: datanode01
    ports:
      - "8900:9864"
    

  datanode02:
    <<: *datanode_base
    container_name: datanode02
    hostname: datanode02
    ports:
      - "8901:9864"

  datanode03:
    <<: *datanode_base
    container_name: datanode03
    hostname: datanode03
    ports:
      - "8902:9864"

  datanode04:
    <<: *datanode_base
    container_name: datanode04
    hostname: datanode04
    ports:
      - "8903:9864"

  resourcemanager01:
    image: resourcemanager
    container_name: resourcemanager01
    hostname: resourcemanager01
    ports:
      - "9100:8088"
    networks:
      - bridge
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/"]
      interval: 30s
      timeout: 20s
      retries: 7
      start_period: 15s

  resourcemanager02:
    image: resourcemanager
    container_name: resourcemanager02
    hostname: resourcemanager02
    ports:
      - "9101:8088"
    networks:
      - bridge
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/"]
      interval: 30s
      timeout: 20s
      retries: 10
      start_period: 15s
  
  sparkhistoryserver:
    image: spark-historyserver
    container_name: sparkhistoryserver
    hostname: sparkhistoryserver
    ports:
      - "9093:18080"
    depends_on:
      - namenode01
      - namenode02
      - resourcemanager01
      - resourcemanager02
    networks:
      - bridge
  
  zookeeper01:
    image: hadoop-zookeeper
    container_name: zookeeper01
    hostname: zookeeper01
    ports :
      - 2181:2181
    networks:
      - bridge
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2888:3888;2181 server.2=zookeeper02:2888:3888;2181 server.3=zookeeper03:2888:3888;2181
      ZOO_4LW_COMMANDS_WHITELIST: ruok, stat, mntr
    restart: always
    command: zkServer.sh start-foreground
    
  zookeeper02:
    image: hadoop-zookeeper
    container_name: zookeeper02
    hostname: zookeeper02
    networks:
      - bridge
    ports:
      - 2182:2181
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zookeeper01:2888:3888;2181 server.2=0.0.0.0:2888:3888;2181 server.3=zookeeper03:2888:3888;2181
      ZOO_4LW_COMMANDS_WHITELIST: ruok, stat, mntr
    restart: always
    command: zkServer.sh start-foreground

  zookeeper03:
    image: hadoop-zookeeper
    container_name: zookeeper03
    hostname: zookeeper03
    networks:
      - bridge
    ports:
      - 2183:2181
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zookeeper01:2888:3888;2181 server.2=zookeeper02:2888:3888;2181 server.3=0.0.0.0:2888:3888;2181
      ZOO_4LW_COMMANDS_WHITELIST: ruok, stat, mntr
    restart: always
    command: zkServer.sh start-foreground
    
volumes:
  namenode:
  datanode01:
  datanode02:
  datanode03:
  datanode04:

networks:
  bridge:

